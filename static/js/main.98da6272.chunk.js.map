{"version":3,"sources":["components/Util/converter.js","components/Article/ArticleList/ArticleListItem/ArticleItem.js","components/Article/ArticleList/Paginator.js","components/Article/ArticleList/ArticleList.js","components/Article/ArticlePage/ArticlePage.js","components/Header/Header.js","components/Header/HeaderNav/HeaderNav.js","components/NotFound/NotFound.js","components/App/App.js","serviceWorker.js","index.js"],"names":["showdown","extension","type","filter","text","converter","options","helper","replaceRecursiveRegExp","wholeMatch","match","left","right","lang","slice","replace","hljs","getLanguage","highlight","value","highlightAuto","date_formatter","date","current_datetime","Date","getMonth","getDate","getFullYear","ArticleItem","react_default","a","createElement","className","this","props","metaData","react_router_dom","to","concat","category","hash","title","excerpt","Component","Paginator","pageNumber","parseInt","content","ArticleList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setCurrentPageFromQueryString","querystring","parse","location","search","split","page","setStateForPageQuery","setState","currentPage","renderRedirect","react_router","pageCalculation","totalCount","state","data","perPage","articleList","nextProps","nextContext","_this2","axios","get","then","res","startIndex","endIndex","articleElements","paginators","maxPage","console","log","hasNext","push","Paginator_Paginator","key","length","index","articleInfo","ArticleItem_ArticleItem","assign","i","flag","defineProperty","test","articleData","pagination","ArticlePage","meta_data","html_data","params","md_data","my_converter","arguments","undefined","metadata","extensions","Converter","makeHtml","getMetadata","dangerouslySetInnerHTML","__html","Header","id","HeaderNav","NotFound","customHistory","createBrowserHistory","App","history","Header_Header_Header","HeaderNav_HeaderNav_HeaderNav","exact","path","render","component","Boolean","window","hostname","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98da6272.chunk.js","sourcesContent":["import showdown from 'showdown';\nimport hljs from 'highlight.js';\n\nshowdown.extension('highlight', () => {\n    const htmlUnEncode = text => {\n        return (\n            text\n                .replace(/&amp;/g, '&')\n                .replace(/&lt;/g, '<')\n                .replace(/&gt;/g, '>')\n        );\n    }\n    return [{\n        type: \"output\",\n        filter: (text, converter, options) => {\n            const left = \"<pre><code\\\\b[^>]*>\",\n                right = \"</code></pre>\",\n                flags = \"g\";\n            const replacement = (wholeMatch, match, left, right) => {\n                const lang = (left.match(/class=\\\"([^ \\\"]+)/) || [])[1];\n                left = left.slice(0, 18) + 'hljs ' + left.slice(18);\n                match = htmlUnEncode(match);\n                if (lang && hljs.getLanguage(lang)) {\n                    return left + hljs.highlight(lang, match).value + right;\n                } else {\n                    return left + hljs.highlightAuto(match).value + right;\n                }\n            };\n            return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);\n        }\n    }];\n});\n\n\nconst converter = (options = {metadata: true, extensions: ['highlight']}) => {\n    return new showdown.Converter(options)\n};\nconst date_formatter = (date) => {\n    const months = [\"January\", \"February\", \"March\",\"April\", \"May\", \"Jun\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let current_datetime = new Date(date)\n    let formatted_date = months[current_datetime.getMonth()] + \" \" +  current_datetime.getDate() + \", \" + current_datetime.getFullYear()\n    return formatted_date;\n}\n\nexport { converter, date_formatter }","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './ArticleItem.css';\r\n\r\nimport {date_formatter} from \"../../../Util/converter\";\r\n\r\nexport default class ArticleItem extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"article-item\">\r\n                <div>\r\n                    <div className=\"date-label\">\r\n                        {date_formatter(this.props.metaData.date)}\r\n                    </div>\r\n                    <div className=\"title-label\">\r\n                        <Link to={`/post/${this.props.metaData.category}/${this.props.hash}`}>\r\n                            <h1>{this.props.title}</h1>\r\n                        </Link>\r\n                    </div>\r\n                    <div>\r\n                        {this.props.excerpt}\r\n                    </div>\r\n                </div>\r\n                <hr className=\"content-hr\"></hr>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './Pagenator.css';\n\n\n//TODO : hexo next theme를 참조한다.\nexport default class Paginator extends Component {\n    render() {\n        const pageNumber = parseInt(this.props.pageNumber);\n        const content = this.props.content;\n        return (\n            <div className='pagination-area'>\n                <Link to={`/post?page=${pageNumber}`}>\n                    <button className=\"pagination-button\">{content}</button>\n                </Link>\n            </div>\n        )\n\n    }\n}","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {Redirect} from 'react-router-dom';\r\nimport './ArticleList.css';\r\nimport ArticleItem from \"./ArticleListItem/ArticleItem\";\r\nimport Paginator from './Paginator';\r\nimport querystring from 'querystring';\r\n\r\n\r\nexport default class ArticleList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                articleList: [],\r\n                totalCount: 0\r\n            },\r\n            perPage: 10\r\n        }\r\n    }\r\n\r\n    setCurrentPageFromQueryString = (props) => {\r\n        const querys = querystring.parse(props.location.search.split(\"?\")[1])\r\n        const pageNumber = querys.page;\r\n        return pageNumber;\r\n    }\r\n\r\n    setStateForPageQuery = (props) => {\r\n        const pageNumber = this.setCurrentPageFromQueryString(props);\r\n        if (!!pageNumber) {\r\n            this.setState({currentPage: parseInt(pageNumber)})\r\n        } else {\r\n            this.setState({currentPage: 1})\r\n        }\r\n        return pageNumber;\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.setStateForPageQuery(nextProps);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setStateForPageQuery(this.props);\r\n        axios.get('/static/post/index.json')\r\n            .then(res => this.setState({data: res.data}))\r\n\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        return <Redirect to='/404'/>\r\n    };\r\n    pageCalculation = () => {\r\n        const totalCount = this.state.data.totalCount;\r\n        const perPage = this.state.perPage;\r\n        return parseInt(totalCount / perPage) + (totalCount % perPage ? 1 : 0);\r\n    };\r\n\r\n    pagination(articleList) {\r\n\r\n        const articleElements = [];\r\n        const paginators = [];\r\n        const totalNumPageCount = 2;\r\n        const zero = 1;\r\n        const perPage = this.state.perPage;\r\n        const currentPage = this.state.currentPage;\r\n        const maxPage = this.pageCalculation();\r\n        console.log(`current Page ${currentPage} : perPage ${perPage}  :maxPage : ${maxPage}`)\r\n        let startIndex;\r\n        let endIndex;\r\n        if (currentPage <= totalNumPageCount) {\r\n            startIndex = zero;\r\n            endIndex   = currentPage + totalNumPageCount;\r\n        } else if (currentPage + totalNumPageCount > maxPage) {\r\n            startIndex = currentPage - totalNumPageCount;\r\n            endIndex = maxPage;\r\n        } else {\r\n            startIndex = currentPage - totalNumPageCount;\r\n            endIndex = currentPage + totalNumPageCount;\r\n        }\r\n        if(currentPage <= totalNumPageCount) endIndex = maxPage;\r\n        // if (endIndex > maxPage ) {\r\n        //     console.log(endIndex)\r\n        //     endIndex = maxPage;\r\n        // }\r\n\r\n\r\n        const hasPrevious = currentPage === zero ? false : true;\r\n        const hasNext = currentPage === maxPage ? false : true;\r\n        if (hasPrevious) {\r\n            paginators.push(<Paginator pageNumber={1} content=\"<<\" key={0}/>)\r\n        }\r\n        // console.log(`current Page ${currentPage} : perPage ${perPage} : stargIndex ${startIndex} endIndex ${endIndex} :maxPage : ${maxPage}`)\r\n        if (!!articleList.length) {\r\n            for (let index = (currentPage -1) * perPage; index < (currentPage-1) * perPage + 10; index++) {\r\n                // console.log(index)\r\n                const articleInfo = articleList[index];\r\n                // console.log('articleInfo', articleInfo)\r\n                if(articleInfo){\r\n                    articleElements.push(<ArticleItem {...articleInfo} key={index}/>);\r\n                }\r\n            }\r\n        }\r\n        for( let i = startIndex; i <= endIndex; i++ ) {\r\n            paginators.push(<Paginator flag={true} key={i} pageNumber={i} content={i}/>)\r\n        }\r\n        if (hasNext) {\r\n            paginators.push(<Paginator flag={true} key={maxPage} pageNumber={maxPage} content=\">>\" key={66566}/>)\r\n        }\r\n        return {\r\n            articleElements,\r\n            test: paginators\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const currentPage = this.state.currentPage;\r\n        const maxPage = this.pageCalculation();\r\n        if (currentPage && maxPage && currentPage > maxPage ) {\r\n            return this.renderRedirect();\r\n        }\r\n        const articleData = this.pagination(this.state.data.articleList);\r\n        return (\r\n            <div>\r\n                <div className=\"article-list\">\r\n                    {articleData.articleElements}\r\n                </div>\r\n                <div className=\"pagination\">\r\n                    {articleData.test}\r\n                    {/*{articleData.hasPrevious}*/}\r\n                    {/*{articleData.hasNext}*/}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { converter, date_formatter } from '../../Util/converter';\r\nimport './ArticlePage.css';\r\nimport 'highlight.js/styles/github.css';\r\n\r\n\r\nexport default class ArticlePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            meta_data: \"\",\r\n            html_data: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`/static/post/${this.props.match.params.type}/${this.props.match.params.hash}.md`)\r\n            .then(res => {\r\n                const md_data = res.data;\r\n                const my_converter = converter();\r\n                const html_data = my_converter.makeHtml(md_data);\r\n                const meta_data = my_converter.getMetadata();\r\n                this.setState({ meta_data, html_data })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"article-root\">\r\n                    <div className=\"article-header\">\r\n                        <h1 className=\"item-center content-header\">{this.state.meta_data.title}</h1>\r\n                        <p className=\"item-center content-header-date\">{date_formatter(this.state.meta_data.date)}</p>\r\n                    </div>\r\n                    <div className=\"article-content\"  dangerouslySetInnerHTML={{__html: this.state.html_data}}>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\n\r\nexport default class Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-root\">\r\n                <div className=\"header-content\">\r\n                    <div id=\"blog-title\">\r\n                        <p className='text-center'>Hello World</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './HeaderNav.css';\r\n\r\nexport default class HeaderNav extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-nav-root\">\r\n                <div className=\"header-nav-content text-center\">\r\n                    <Link to='/'>\r\n                        <li>Home</li>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\n\nexport default () => {\n    return (\n        <div>page not found</div>\n    )\n}\n","import React, {Component} from 'react';\r\nimport {Route, Redirect, BrowserRouter as Router, Switch} from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport ArticleList from '../Article/ArticleList/ArticleList';\r\nimport ArticlePage from '../Article/ArticlePage/ArticlePage';\r\nimport Header from '../Header/Header';\r\nimport HeaderNav from '../Header/HeaderNav/HeaderNav';\r\nimport NotFound from '../NotFound/NotFound';\r\n// import Footer from '../Footer/Footer';\r\nimport './App.css';\r\nconst customHistory = createBrowserHistory();\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router history={customHistory}>\r\n                    <Header/>\r\n                    <HeaderNav/>\r\n                    <div>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" render={() => <Redirect to='/post'/>}/>\r\n                            <Route exact path=\"/post\" component={ArticleList}/>\r\n                            <Route path=\"/post/:type/:hash\" component={ArticlePage}/>\r\n                            <Route exact path=\"/404\" component={NotFound}/>\r\n                        </Switch>\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}